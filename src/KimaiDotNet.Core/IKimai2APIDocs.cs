// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace MarkZither.KimaiDotNet
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// JSON API for the Kimai 2 time-tracking software: [API
    /// documentation](https://www.kimai.org/documentation/rest-api.html),
    /// [Swagger definition file](doc.json)
    ///
    /// </summary>
    public partial interface IKimai2APIDocs : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


        /// <summary>
        /// Sets the value of a meta-field for an existing activity
        /// </summary>
        /// <param name='id'>
        /// Activity record ID to set the meta-field value for
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ActivityEntity>> UpdateActivityMetaUsingPatchWithHttpMessagesAsync(int id, Body body = default(Body), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a collection of activities
        /// </summary>
        /// <param name='project'>
        /// Project ID to filter activities
        /// </param>
        /// <param name='projects'>
        /// Comma separated list of project IDs to filter activities
        /// </param>
        /// <param name='visible'>
        /// Visibility status to filter activities. Allowed values: 1=visible,
        /// 2=hidden, 3=all (default: 1)
        /// </param>
        /// <param name='globals'>
        /// Use if you want to fetch only global activities. Allowed values:
        /// true (default: false)
        /// </param>
        /// <param name='globalsFirst'>
        /// Deprecated parameter, value is not used any more
        /// </param>
        /// <param name='orderBy'>
        /// The field by which results will be ordered. Allowed values: id,
        /// name, project (default: name)
        /// </param>
        /// <param name='order'>
        /// The result order. Allowed values: ASC, DESC (default: ASC)
        /// </param>
        /// <param name='term'>
        /// Free search term
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ActivityCollection>>> ListActivitiesUsingGetWithHttpMessagesAsync(string project = default(string), string projects = default(string), string visible = default(string), string globals = default(string), string globalsFirst = default(string), string orderBy = default(string), string order = default(string), string term = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new activity
        /// </summary>
        /// <remarks>
        /// Creates a new activity and returns it afterwards
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ActivityEntity>> CreateActivityUsingPostWithHttpMessagesAsync(ActivityEditForm body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns one activity
        /// </summary>
        /// <param name='id'>
        /// Activity ID to fetch
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ActivityEntity>> GetActivityByIdUsingGetWithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update an existing activity
        /// </summary>
        /// <remarks>
        /// Update an existing activity, you can pass all or just a subset of
        /// all attributes
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='id'>
        /// Activity ID to update
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ActivityEntity>> UpdateActivityUsingPatchWithHttpMessagesAsync(ActivityEditForm body, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a collection of all rates for one activity
        /// </summary>
        /// <param name='id'>
        /// The activity whose rates will be returned
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ActivityRate>>> ListActivityRatesUsingGetWithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a new rate to an activity
        /// </summary>
        /// <param name='id'>
        /// The activity to add the rate for
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ActivityRate>> AddActivityRateUsingPostWithHttpMessagesAsync(int id, ActivityRateForm body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes one rate for an activity
        /// </summary>
        /// <param name='id'>
        /// The activity whose rate will be removed
        /// </param>
        /// <param name='rateId'>
        /// The rate to remove
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteActivityRateUsingDeleteWithHttpMessagesAsync(int id, int rateId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the user specific locale configuration
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<I18nConfig>> GetCurrentUserLocaleUsingGetWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the timesheet configuration
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TimesheetConfig>> GetTimesheetConfigUsingGetWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sets the value of a meta-field for an existing customer
        /// </summary>
        /// <param name='id'>
        /// Customer record ID to set the meta-field value for
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CustomerEntity>> UpdateCustomerMetaUsingPatchWithHttpMessagesAsync(int id, Body body = default(Body), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a collection of customers
        /// </summary>
        /// <param name='visible'>
        /// Visibility status to filter activities (1=visible, 2=hidden,
        /// 3=both)
        /// </param>
        /// <param name='order'>
        /// The result order. Allowed values: ASC, DESC (default: ASC)
        /// </param>
        /// <param name='orderBy'>
        /// The field by which results will be ordered. Allowed values: id,
        /// name (default: name)
        /// </param>
        /// <param name='term'>
        /// Free search term
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<CustomerCollection>>> ListCustomersUsingGetWithHttpMessagesAsync(string visible = default(string), string order = default(string), string orderBy = default(string), string term = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new customer
        /// </summary>
        /// <remarks>
        /// Creates a new customer and returns it afterwards
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CustomerEntity>> CreateCustomerUsingPostWithHttpMessagesAsync(CustomerEditForm body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns one customer
        /// </summary>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CustomerEntity>> GetCustomerByIdUsingGetWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update an existing customer
        /// </summary>
        /// <remarks>
        /// Update an existing customer, you can pass all or just a subset of
        /// all attributes
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='id'>
        /// Customer ID to update
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CustomerEntity>> UpdateCustomerUsingPatchWithHttpMessagesAsync(CustomerEditForm body, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a collection of all rates for one customer
        /// </summary>
        /// <param name='id'>
        /// The customer whose rates will be returned
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<CustomerRate>>> ListCustomerRatesUsingGetWithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a new rate to a customer
        /// </summary>
        /// <param name='id'>
        /// The customer to add the rate for
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CustomerRate>> CreateCustomerRateUsingPostWithHttpMessagesAsync(int id, CustomerRateForm body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes one rate for an customer
        /// </summary>
        /// <param name='id'>
        /// The customer whose rate will be removed
        /// </param>
        /// <param name='rateId'>
        /// The rate to remove
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteCustomerRateUsingDeleteWithHttpMessagesAsync(int id, int rateId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sets the value of a meta-field for an existing project
        /// </summary>
        /// <param name='id'>
        /// Project record ID to set the meta-field value for
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProjectEntity>> UpdateProjectMetaUsingPatchWithHttpMessagesAsync(int id, Body body = default(Body), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a collection of projects.
        /// </summary>
        /// <param name='customer'>
        /// Customer ID to filter projects
        /// </param>
        /// <param name='customers'>
        /// Comma separated list of customer IDs to filter projects
        /// </param>
        /// <param name='visible'>
        /// Visibility status to filter projects. Allowed values: 1=visible,
        /// 2=hidden, 3=both (default: 1)
        /// </param>
        /// <param name='start'>
        /// Only projects that started before this date will be included.
        /// Allowed format: HTML5 (default: now, if end is also empty)
        /// </param>
        /// <param name='end'>
        /// Only projects that ended after this date will be included. Allowed
        /// format: HTML5 (default: now, if start is also empty)
        /// </param>
        /// <param name='ignoreDates'>
        /// If set, start and end are completely ignored. Allowed values: 1
        /// (default: off)
        /// </param>
        /// <param name='order'>
        /// The result order. Allowed values: ASC, DESC (default: ASC)
        /// </param>
        /// <param name='orderBy'>
        /// The field by which results will be ordered. Allowed values: id,
        /// name, customer (default: name)
        /// </param>
        /// <param name='term'>
        /// Free search term
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ProjectCollection>>> ListProjectUsingGetWithHttpMessagesAsync(string customer = default(string), string customers = default(string), string visible = default(string), string start = default(string), string end = default(string), string ignoreDates = default(string), string order = default(string), string orderBy = default(string), string term = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new project
        /// </summary>
        /// <remarks>
        /// Creates a new project and returns it afterwards
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProjectEntity>> CreateProjectUsingPostWithHttpMessagesAsync(ProjectEditForm body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns one project
        /// </summary>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProjectEntity>> GetProjectByIdUsingGetWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update an existing project
        /// </summary>
        /// <remarks>
        /// Update an existing project, you can pass all or just a subset of
        /// all attributes
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='id'>
        /// Project ID to update
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProjectEntity>> UpdateProjectUsingPatchWithHttpMessagesAsync(ProjectEditForm body, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a collection of all rates for one project
        /// </summary>
        /// <param name='id'>
        /// The project whose rates will be returned
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ProjectRate>>> GetProjectRateUsingGetWithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a new rate to an project
        /// </summary>
        /// <param name='id'>
        /// The project to add the rate for
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProjectRate>> CreateProjectRateUsingPostWithHttpMessagesAsync(int id, ProjectRateForm body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes one rate for an project
        /// </summary>
        /// <param name='id'>
        /// The project whose rate will be removed
        /// </param>
        /// <param name='rateId'>
        /// The rate to remove
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteProjectRateUsingDeleteWithHttpMessagesAsync(int id, int rateId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// A testing route for the API
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PingWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns information about the Kimai release
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Version>> VersionMethodWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Fetch all existing tags
        /// </summary>
        /// <param name='name'>
        /// Search term to filter tag list
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<string>>> ListTagsUsingGetWithHttpMessagesAsync(string name = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new tag
        /// </summary>
        /// <remarks>
        /// Creates a new tag and returns it afterwards
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TagEntity>> CreateTagUsingPostWithHttpMessagesAsync(TagEditForm body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a tag
        /// </summary>
        /// <param name='id'>
        /// Tag ID to delete
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteTagUsingDeleteWithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Fetch all existing teams
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<TeamCollection>>> ListTeamUsingGetWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new team
        /// </summary>
        /// <remarks>
        /// Creates a new team and returns it afterwards
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TeamEntity>> CreateTeamUsingPostWithHttpMessagesAsync(TeamEditForm body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns one team
        /// </summary>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TeamEntity>> GetTeamByIdUsingGetWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update an existing team
        /// </summary>
        /// <remarks>
        /// Update an existing team, you can pass all or just a subset of all
        /// attributes (passing users will replace all existing ones)
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='id'>
        /// Team ID to update
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TeamEntity>> UpdateTeamUsingPatchWithHttpMessagesAsync(TeamEditForm body, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a team
        /// </summary>
        /// <param name='id'>
        /// Team ID to delete
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteTeamUsingDeleteWithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a new member to a team
        /// </summary>
        /// <param name='id'>
        /// The team which will receive the new member
        /// </param>
        /// <param name='userId'>
        /// The team member to add (User ID)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TeamEntity>> AddTeamMemberUsingPostWithHttpMessagesAsync(int id, int userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes a member from the team
        /// </summary>
        /// <param name='id'>
        /// The team from which the member will be removed
        /// </param>
        /// <param name='userId'>
        /// The team member to remove (User ID)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TeamEntity>> DeleteTeamMemberUsingDeleteWithHttpMessagesAsync(int id, int userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Grant the team access to a customer
        /// </summary>
        /// <param name='id'>
        /// The team that is granted access
        /// </param>
        /// <param name='customerId'>
        /// The customer to grant acecess to (Customer ID)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TeamEntity>> GrantTeamCustomerAccessUsingPostWithHttpMessagesAsync(int id, int customerId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Revokes access for a customer from a team
        /// </summary>
        /// <param name='id'>
        /// The team whose permission will be revoked
        /// </param>
        /// <param name='customerId'>
        /// The customer to remove (Customer ID)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TeamEntity>> RevokeTeamCustomerAccessUsingDeleteWithHttpMessagesAsync(int id, int customerId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Grant the team access to a project
        /// </summary>
        /// <param name='id'>
        /// The team that is granted access
        /// </param>
        /// <param name='projectId'>
        /// The project to grant acecess to (Project ID)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TeamEntity>> GrantTeamProjectAccessUsingPostWithHttpMessagesAsync(int id, int projectId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Revokes access for a project from a team
        /// </summary>
        /// <param name='id'>
        /// The team whose permission will be revoked
        /// </param>
        /// <param name='projectId'>
        /// The project to remove (Project ID)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TeamEntity>> RevokeTeamProjectAccessUsingDeleteWithHttpMessagesAsync(int id, int projectId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Grant the team access to an activity
        /// </summary>
        /// <param name='id'>
        /// The team that is granted access
        /// </param>
        /// <param name='activityId'>
        /// The activity to grant acecess to (Activity ID)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TeamEntity>> GrantTeamActivityAccessUsingPostWithHttpMessagesAsync(int id, int activityId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Revokes access for an activity from a team
        /// </summary>
        /// <param name='id'>
        /// The team whose permission will be revoked
        /// </param>
        /// <param name='activityId'>
        /// The activity to remove (Activity ID)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TeamEntity>> RevokeTeamActivityAccessUsingDeleteWithHttpMessagesAsync(int id, int activityId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the collection of recent user activities
        /// </summary>
        /// <param name='user'>
        /// User ID to filter timesheets. Needs permission
        /// 'view_other_timesheet', pass 'all' to fetch data for all user
        /// (default: current user)
        /// </param>
        /// <param name='begin'>
        /// Only records after this date will be included. Default: today - 1
        /// year (format: HTML5)
        /// </param>
        /// <param name='size'>
        /// The amount of entries (default: 10)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<TimesheetCollectionExpanded>>> ListUserTimesheetsUsingGetWithHttpMessagesAsync(string user = default(string), string begin = default(string), string size = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the collection of active timesheet records
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<TimesheetCollectionExpanded>>> ListUsersActiveTimesheetsUsingGetWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Stops an active timesheet record
        /// </summary>
        /// <param name='id'>
        /// Timesheet record ID to stop
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TimesheetEntity>> StopActiveTimesheetRecordUsingPatchWithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Restarts a previously stopped timesheet record for the current user
        /// </summary>
        /// <param name='id'>
        /// Timesheet record ID to restart
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TimesheetEntity>> RestartTimesheetUsingPatchWithHttpMessagesAsync(int id, BodyModel body = default(BodyModel), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Duplicates an existing timesheet record
        /// </summary>
        /// <param name='id'>
        /// Timesheet record ID to duplicate
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TimesheetEntity>> DuplicateTimesheetUsingPatchWithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Switch the export state of a timesheet record to (un-)lock it
        /// </summary>
        /// <param name='id'>
        /// Timesheet record ID to switch export state
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TimesheetEntity>> SwitchTimesheetLockUsingPatchWithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sets the value of a meta-field for an existing timesheet.
        /// </summary>
        /// <param name='id'>
        /// Timesheet record ID to set the meta-field value for
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TimesheetEntity>> UpdateTimesheetMetaUsingPatchWithHttpMessagesAsync(int id, Body body = default(Body), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a collection of timesheet records
        /// </summary>
        /// <param name='user'>
        /// User ID to filter timesheets. Needs permission
        /// 'view_other_timesheet', pass 'all' to fetch data for all user
        /// (default: current user)
        /// </param>
        /// <param name='customer'>
        /// DEPRECATED: Customer ID to filter timesheets (will be removed with
        /// 2.0)
        /// </param>
        /// <param name='customers'>
        /// Comma separated list of customer IDs to filter timesheets
        /// </param>
        /// <param name='project'>
        /// DEPRECATED: Project ID to filter timesheets (will be removed with
        /// 2.0)
        /// </param>
        /// <param name='projects'>
        /// Comma separated list of project IDs to filter timesheets
        /// </param>
        /// <param name='activity'>
        /// DEPRECATED: Activity ID to filter timesheets (will be removed with
        /// 2.0)
        /// </param>
        /// <param name='activities'>
        /// Comma separated list of activity IDs to filter timesheets
        /// </param>
        /// <param name='page'>
        /// The page to display, renders a 404 if not found (default: 1)
        /// </param>
        /// <param name='size'>
        /// The amount of entries for each page (default: 50)
        /// </param>
        /// <param name='tags'>
        /// The name of tags which are in the datasets
        /// </param>
        /// <param name='orderBy'>
        /// The field by which results will be ordered. Allowed values: id,
        /// begin, end, rate (default: begin)
        /// </param>
        /// <param name='order'>
        /// The result order. Allowed values: ASC, DESC (default: DESC)
        /// </param>
        /// <param name='begin'>
        /// Only records after this date will be included (format: HTML5)
        /// </param>
        /// <param name='end'>
        /// Only records before this date will be included (format: HTML5)
        /// </param>
        /// <param name='exported'>
        /// Use this flag if you want to filter for export state. Allowed
        /// values: 0=not exported, 1=exported (default: all)
        /// </param>
        /// <param name='active'>
        /// Filter for running/active records. Allowed values: 0=stopped,
        /// 1=active (default: all)
        /// </param>
        /// <param name='full'>
        /// Allows to fetch fully serialized objects including subresources.
        /// Allowed values: true (default: false)
        /// </param>
        /// <param name='term'>
        /// Free search term
        /// </param>
        /// <param name='modifiedAfter'>
        /// Only records changed after this date will be included (format:
        /// HTML5). Available since Kimai 1.10 and works only for records that
        /// were created/updated since then.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<TimesheetCollection>>> ListTimesheetsRecordsUsingGetWithHttpMessagesAsync(string user = default(string), string customer = default(string), string customers = default(string), string project = default(string), string projects = default(string), string activity = default(string), string activities = default(string), string page = default(string), string size = default(string), string tags = default(string), string orderBy = default(string), string order = default(string), string begin = default(string), string end = default(string), string exported = default(string), string active = default(string), string full = default(string), string term = default(string), string modifiedAfter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new timesheet record
        /// </summary>
        /// <remarks>
        /// Creates a new timesheet record for the current user and returns it
        /// afterwards.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='full'>
        /// Allows to fetch fully serialized objects including subresources
        /// (TimesheetEntityExpanded). Allowed values: true (default: false)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TimesheetEntity>> CreateTimesheetRecordUsingPostWithHttpMessagesAsync(TimesheetEditForm body, string full = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns one timesheet record
        /// </summary>
        /// <param name='id'>
        /// Timesheet record ID to fetch
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TimesheetEntity>> GetTimesheetRecordByIdUsingGetWithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update an existing timesheet record
        /// </summary>
        /// <remarks>
        /// Update an existing timesheet record, you can pass all or just a
        /// subset of the attributes.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='id'>
        /// Timesheet record ID to update
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TimesheetEntity>> UpdateTimesheetRecordUsingPatchWithHttpMessagesAsync(TimesheetEditForm body, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an existing timesheet record
        /// </summary>
        /// <param name='id'>
        /// Timesheet record ID to delete
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteTimesheetRecordUsingDeleteWithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Return the current user entity
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserEntity>> GetCurrentUserUsingGetWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the collection of all registered users
        /// </summary>
        /// <param name='visible'>
        /// Visibility status to filter users. Allowed values: 1=visible,
        /// 2=hidden, 3=all (default: 1)
        /// </param>
        /// <param name='orderBy'>
        /// The field by which results will be ordered. Allowed values: id,
        /// username, alias, email (default: username)
        /// </param>
        /// <param name='order'>
        /// The result order. Allowed values: ASC, DESC (default: ASC)
        /// </param>
        /// <param name='term'>
        /// Free search term
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<UserCollection>>> ListUsersUsingGetWithHttpMessagesAsync(string visible = default(string), string orderBy = default(string), string order = default(string), string term = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new user
        /// </summary>
        /// <remarks>
        /// Creates a new user and returns it afterwards
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserEntity>> CreateUserUsingPostWithHttpMessagesAsync(UserCreateForm body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Return one user entity
        /// </summary>
        /// <param name='id'>
        /// User ID to fetch
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserEntity>> GetUserByIdUsingGetWithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update an existing user
        /// </summary>
        /// <remarks>
        /// Update an existing user, you can pass all or just a subset of all
        /// attributes (passing roles will replace all existing ones)
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='id'>
        /// User ID to update
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserEntity>> UpdateUserUsingPatchWithHttpMessagesAsync(UserEditForm body, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
