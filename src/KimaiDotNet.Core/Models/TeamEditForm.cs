// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace MarkZither.KimaiDotNet.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class TeamEditForm
    {
        /// <summary>
        /// Initializes a new instance of the TeamEditForm class.
        /// </summary>
        public TeamEditForm()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TeamEditForm class.
        /// </summary>
        /// <param name="name">Name of the team</param>
        /// <param name="teamlead">User ID for the teamlead</param>
        /// <param name="users">Team member</param>
        public TeamEditForm(string name, int teamlead, IList<int?> users)
        {
            Name = name;
            Teamlead = teamlead;
            Users = users;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the team
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets user ID for the teamlead
        /// </summary>
        [JsonProperty(PropertyName = "teamlead")]
        public int Teamlead { get; set; }

        /// <summary>
        /// Gets or sets team member
        /// </summary>
        /// <remarks>
        /// Array of team member IDs
        /// </remarks>
        [JsonProperty(PropertyName = "users")]
        public IList<int?> Users { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Users == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Users");
            }
        }
    }
}
