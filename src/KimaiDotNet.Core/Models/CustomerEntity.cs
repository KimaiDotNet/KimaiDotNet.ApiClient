// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace MarkZither.KimaiDotNet.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class CustomerEntity
    {
        /// <summary>
        /// Initializes a new instance of the CustomerEntity class.
        /// </summary>
        public CustomerEntity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CustomerEntity class.
        /// </summary>
        /// <param name="timezone">Timezone of begin and end</param>
        /// <param name="email">Customers contact email</param>
        /// <param name="metaFields">Meta fields</param>
        /// <param name="teams">Teams</param>
        /// <param name="color">The assigned color in HTML hex format, eg.
        /// #dd1d00</param>
        public CustomerEntity(string name, bool visible, string country, string currency, string timezone, double budget, int timeBudget, int? id = default(int?), string number = default(string), string comment = default(string), string company = default(string), string vatId = default(string), string contact = default(string), string address = default(string), string phone = default(string), string fax = default(string), string mobile = default(string), string email = default(string), string homepage = default(string), IList<CustomerMeta> metaFields = default(IList<CustomerMeta>), IList<Team> teams = default(IList<Team>), string color = default(string))
        {
            Id = id;
            Name = name;
            Number = number;
            Comment = comment;
            Visible = visible;
            Company = company;
            VatId = vatId;
            Contact = contact;
            Address = address;
            Country = country;
            Currency = currency;
            Phone = phone;
            Fax = fax;
            Mobile = mobile;
            Email = email;
            Homepage = homepage;
            Timezone = timezone;
            Budget = budget;
            TimeBudget = timeBudget;
            MetaFields = metaFields;
            Teams = teams;
            Color = color;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "number")]
        public string Number { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "comment")]
        public string Comment { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "visible")]
        public bool Visible { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "company")]
        public string Company { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "vatId")]
        public string VatId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "contact")]
        public string Contact { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "address")]
        public string Address { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "country")]
        public string Country { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "currency")]
        public string Currency { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "phone")]
        public string Phone { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fax")]
        public string Fax { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mobile")]
        public string Mobile { get; set; }

        /// <summary>
        /// Gets or sets customers contact email
        /// </summary>
        /// <remarks>
        /// Limited via RFC to 254 chars
        /// </remarks>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "homepage")]
        public string Homepage { get; set; }

        /// <summary>
        /// Gets or sets timezone of begin and end
        /// </summary>
        /// <remarks>
        /// Length was determined by a MySQL column via "use mysql;describe
        /// time_zone_name;"
        /// </remarks>
        [JsonProperty(PropertyName = "timezone")]
        public string Timezone { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "budget")]
        public double Budget { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "timeBudget")]
        public int TimeBudget { get; set; }

        /// <summary>
        /// Gets or sets meta fields
        /// </summary>
        /// <remarks>
        /// All visible meta (custom) fields registered with this customer
        /// </remarks>
        [JsonProperty(PropertyName = "metaFields")]
        public IList<CustomerMeta> MetaFields { get; set; }

        /// <summary>
        /// Gets or sets teams
        /// </summary>
        /// <remarks>
        /// If no team is assigned, everyone can access the customer
        /// </remarks>
        [JsonProperty(PropertyName = "teams")]
        public IList<Team> Teams { get; set; }

        /// <summary>
        /// Gets or sets the assigned color in HTML hex format, eg. #dd1d00
        /// </summary>
        [JsonProperty(PropertyName = "color")]
        public string Color { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Country == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Country");
            }
            if (Currency == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Currency");
            }
            if (Timezone == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Timezone");
            }
            if (Name != null)
            {
                if (Name.Length > 150)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 150);
                }
                if (Name.Length < 2)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 2);
                }
            }
            if (Number != null)
            {
                if (Number.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Number", 50);
                }
            }
            if (Company != null)
            {
                if (Company.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Company", 255);
                }
            }
            if (VatId != null)
            {
                if (VatId.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "VatId", 50);
                }
            }
            if (Contact != null)
            {
                if (Contact.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Contact", 255);
                }
            }
            if (Country != null)
            {
                if (Country.Length > 2)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Country", 2);
                }
            }
            if (Currency != null)
            {
                if (Currency.Length > 3)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Currency", 3);
                }
            }
            if (Phone != null)
            {
                if (Phone.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Phone", 255);
                }
            }
            if (Fax != null)
            {
                if (Fax.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Fax", 255);
                }
            }
            if (Mobile != null)
            {
                if (Mobile.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Mobile", 255);
                }
            }
            if (Email != null)
            {
                if (Email.Length > 254)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Email", 254);
                }
            }
            if (Homepage != null)
            {
                if (Homepage.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Homepage", 255);
                }
            }
            if (Timezone != null)
            {
                if (Timezone.Length > 64)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Timezone", 64);
                }
            }
            if (MetaFields != null)
            {
                foreach (var element in MetaFields)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Teams != null)
            {
                foreach (var element1 in Teams)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
