// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace MarkZither.KimaiDotNet.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class TimesheetCollectionExpanded
    {
        /// <summary>
        /// Initializes a new instance of the TimesheetCollectionExpanded
        /// class.
        /// </summary>
        public TimesheetCollectionExpanded()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TimesheetCollectionExpanded
        /// class.
        /// </summary>
        /// <param name="metaFields">Meta fields</param>
        public TimesheetCollectionExpanded(System.DateTime begin, ActivityExpanded activity, ProjectExpanded project, int? user = default(int?), IList<string> tags = default(IList<string>), int? id = default(int?), System.DateTime? end = default(System.DateTime?), int? duration = default(int?), string description = default(string), double? rate = default(double?), double? internalRate = default(double?), IList<TimesheetMeta> metaFields = default(IList<TimesheetMeta>))
        {
            User = user;
            Tags = tags;
            Id = id;
            Begin = begin;
            End = end;
            Duration = duration;
            Activity = activity;
            Project = project;
            Description = description;
            Rate = rate;
            InternalRate = internalRate;
            MetaFields = metaFields;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "user")]
        public int? User { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IList<string> Tags { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "begin")]
        public System.DateTime Begin { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "end")]
        public System.DateTime? End { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "duration")]
        public int? Duration { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "activity")]
        public ActivityExpanded Activity { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "project")]
        public ProjectExpanded Project { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "rate")]
        public double? Rate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "internalRate")]
        public double? InternalRate { get; set; }

        /// <summary>
        /// Gets or sets meta fields
        /// </summary>
        /// <remarks>
        /// All visible meta (custom) fields registered with this timesheet
        /// </remarks>
        [JsonProperty(PropertyName = "metaFields")]
        public IList<TimesheetMeta> MetaFields { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Activity == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Activity");
            }
            if (Project == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Project");
            }
            if (Activity != null)
            {
                Activity.Validate();
            }
            if (Project != null)
            {
                Project.Validate();
            }
            if (MetaFields != null)
            {
                foreach (var element in MetaFields)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
