// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace MarkZither.KimaiDotNet.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class TagEntity
    {
        /// <summary>
        /// Initializes a new instance of the TagEntity class.
        /// </summary>
        public TagEntity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TagEntity class.
        /// </summary>
        /// <param name="name">The tag name</param>
        /// <param name="id">The internal ID</param>
        /// <param name="color">The assigned color in HTML hex format, eg.
        /// #dd1d00</param>
        public TagEntity(string name, int? id = default(int?), string color = default(string))
        {
            Id = id;
            Name = name;
            Color = color;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the internal ID
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or sets the tag name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the assigned color in HTML hex format, eg. #dd1d00
        /// </summary>
        [JsonProperty(PropertyName = "color")]
        public string Color { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Name != null)
            {
                if (Name.Length > 100)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 100);
                }
                if (Name.Length < 2)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 2);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(Name, "((?!,).)*"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Name", "((?!,).)*");
                }
            }
        }
    }
}
