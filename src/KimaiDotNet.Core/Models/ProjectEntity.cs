// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace MarkZither.KimaiDotNet.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ProjectEntity
    {
        /// <summary>
        /// Initializes a new instance of the ProjectEntity class.
        /// </summary>
        public ProjectEntity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ProjectEntity class.
        /// </summary>
        /// <param name="name">Project name</param>
        /// <param name="id">Internal ID</param>
        /// <param name="orderNumber">Project order number</param>
        /// <param name="metaFields">Meta fields</param>
        /// <param name="teams">Teams</param>
        /// <param name="color">The assigned color in HTML hex format, eg.
        /// #dd1d00</param>
        public ProjectEntity(string name, bool visible, double budget, int timeBudget, string parentTitle = default(string), int? customer = default(int?), int? id = default(int?), string orderNumber = default(string), System.DateTime? orderDate = default(System.DateTime?), System.DateTime? start = default(System.DateTime?), System.DateTime? end = default(System.DateTime?), string comment = default(string), IList<ProjectMeta> metaFields = default(IList<ProjectMeta>), IList<Team> teams = default(IList<Team>), string color = default(string))
        {
            ParentTitle = parentTitle;
            Customer = customer;
            Id = id;
            Name = name;
            OrderNumber = orderNumber;
            OrderDate = orderDate;
            Start = start;
            End = end;
            Comment = comment;
            Visible = visible;
            Budget = budget;
            TimeBudget = timeBudget;
            MetaFields = metaFields;
            Teams = teams;
            Color = color;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "parentTitle")]
        public string ParentTitle { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "customer")]
        public int? Customer { get; set; }

        /// <summary>
        /// Gets or sets internal ID
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or sets project name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets project order number
        /// </summary>
        [JsonProperty(PropertyName = "orderNumber")]
        public string OrderNumber { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "orderDate")]
        public System.DateTime? OrderDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "start")]
        public System.DateTime? Start { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "end")]
        public System.DateTime? End { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "comment")]
        public string Comment { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "visible")]
        public bool Visible { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "budget")]
        public double Budget { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "timeBudget")]
        public int TimeBudget { get; set; }

        /// <summary>
        /// Gets or sets meta fields
        /// </summary>
        /// <remarks>
        /// All visible meta (custom) fields registered with this project
        /// </remarks>
        [JsonProperty(PropertyName = "metaFields")]
        public IList<ProjectMeta> MetaFields { get; set; }

        /// <summary>
        /// Gets or sets teams
        /// </summary>
        /// <remarks>
        /// If no team is assigned, everyone can access the project (also
        /// depends on the teams of the customer)
        /// </remarks>
        [JsonProperty(PropertyName = "teams")]
        public IList<Team> Teams { get; set; }

        /// <summary>
        /// Gets or sets the assigned color in HTML hex format, eg. #dd1d00
        /// </summary>
        [JsonProperty(PropertyName = "color")]
        public string Color { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Name != null)
            {
                if (Name.Length > 150)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 150);
                }
                if (Name.Length < 2)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 2);
                }
            }
            if (OrderNumber != null)
            {
                if (OrderNumber.Length > 20)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "OrderNumber", 20);
                }
            }
            if (MetaFields != null)
            {
                foreach (var element in MetaFields)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Teams != null)
            {
                foreach (var element1 in Teams)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
