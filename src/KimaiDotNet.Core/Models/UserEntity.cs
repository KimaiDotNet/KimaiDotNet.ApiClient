// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace MarkZither.KimaiDotNet.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class UserEntity
    {
        /// <summary>
        /// Initializes a new instance of the UserEntity class.
        /// </summary>
        public UserEntity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserEntity class.
        /// </summary>
        /// <param name="id">Internal ID</param>
        /// <param name="alias">The user alias will be displayed in the
        /// frontend instead of the username</param>
        /// <param name="title">An additional title for the user, like the Job
        /// position or Department</param>
        /// <param name="avatar">URL to the users avatar, will be
        /// auto-generated if empty</param>
        /// <param name="teams">All teams of the user</param>
        public UserEntity(string username = default(string), bool? enabled = default(bool?), IList<string> roles = default(IList<string>), string language = default(string), string timezone = default(string), int? id = default(int?), string alias = default(string), string title = default(string), string avatar = default(string), IList<Team> teams = default(IList<Team>))
        {
            Username = username;
            Enabled = enabled;
            Roles = roles;
            Language = language;
            Timezone = timezone;
            Id = id;
            Alias = alias;
            Title = title;
            Avatar = avatar;
            Teams = teams;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "username")]
        public string Username { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "enabled")]
        public bool? Enabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "roles")]
        public IList<string> Roles { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "language")]
        public string Language { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "timezone")]
        public string Timezone { get; set; }

        /// <summary>
        /// Gets or sets internal ID
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or sets the user alias will be displayed in the frontend
        /// instead of the username
        /// </summary>
        [JsonProperty(PropertyName = "alias")]
        public string Alias { get; set; }

        /// <summary>
        /// Gets or sets an additional title for the user, like the Job
        /// position or Department
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets URL to the users avatar, will be auto-generated if
        /// empty
        /// </summary>
        [JsonProperty(PropertyName = "avatar")]
        public string Avatar { get; set; }

        /// <summary>
        /// Gets or sets all teams of the user
        /// </summary>
        [JsonProperty(PropertyName = "teams")]
        public IList<Team> Teams { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Alias != null)
            {
                if (Alias.Length > 60)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Alias", 60);
                }
            }
            if (Title != null)
            {
                if (Title.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Title", 50);
                }
            }
            if (Avatar != null)
            {
                if (Avatar.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Avatar", 255);
                }
            }
            if (Teams != null)
            {
                foreach (var element in Teams)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
