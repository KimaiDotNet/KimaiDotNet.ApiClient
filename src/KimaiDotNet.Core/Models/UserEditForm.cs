// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace MarkZither.KimaiDotNet.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class UserEditForm
    {
        /// <summary>
        /// Initializes a new instance of the UserEditForm class.
        /// </summary>
        public UserEditForm()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserEditForm class.
        /// </summary>
        /// <param name="language">Possible values include: 'ar', 'cs', 'de',
        /// 'de_CH', 'da', 'en', 'eo', 'es', 'eu', 'fi', 'fr', 'he', 'hu',
        /// 'it', 'ja', 'ko', 'nl', 'pl', 'pt_BR', 'ro', 'ru', 'sk', 'sv',
        /// 'tr', 'vi', 'zh_CN'</param>
        public UserEditForm(string email, string language, string timezone, string alias = default(string), string title = default(string), string avatar = default(string), bool? enabled = default(bool?), IList<string> roles = default(IList<string>))
        {
            Alias = alias;
            Title = title;
            Avatar = avatar;
            Email = email;
            Language = language;
            Timezone = timezone;
            Enabled = enabled;
            Roles = roles;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "alias")]
        public string Alias { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "avatar")]
        public string Avatar { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'ar', 'cs', 'de', 'de_CH',
        /// 'da', 'en', 'eo', 'es', 'eu', 'fi', 'fr', 'he', 'hu', 'it', 'ja',
        /// 'ko', 'nl', 'pl', 'pt_BR', 'ro', 'ru', 'sk', 'sv', 'tr', 'vi',
        /// 'zh_CN'
        /// </summary>
        [JsonProperty(PropertyName = "language")]
        public string Language { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "timezone")]
        public string Timezone { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "enabled")]
        public bool? Enabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "roles")]
        public IList<string> Roles { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Email == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Email");
            }
            if (Language == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Language");
            }
            if (Timezone == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Timezone");
            }
        }
    }
}
