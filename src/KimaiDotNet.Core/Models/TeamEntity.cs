// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace MarkZither.KimaiDotNet.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class TeamEntity
    {
        /// <summary>
        /// Initializes a new instance of the TeamEntity class.
        /// </summary>
        public TeamEntity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TeamEntity class.
        /// </summary>
        /// <param name="name">Team name</param>
        /// <param name="id">The internal ID</param>
        /// <param name="users">Team member</param>
        /// <param name="customers">Customers</param>
        /// <param name="projects">Projects</param>
        /// <param name="activities">Activities</param>
        public TeamEntity(string name, User teamlead, int? id = default(int?), IList<User> users = default(IList<User>), IList<Customer> customers = default(IList<Customer>), IList<Project> projects = default(IList<Project>), IList<Activity> activities = default(IList<Activity>))
        {
            Id = id;
            Name = name;
            Teamlead = teamlead;
            Users = users;
            Customers = customers;
            Projects = projects;
            Activities = activities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the internal ID
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or sets team name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "teamlead")]
        public User Teamlead { get; set; }

        /// <summary>
        /// Gets or sets team member
        /// </summary>
        /// <remarks>
        /// All team member, including the teamlead
        /// </remarks>
        [JsonProperty(PropertyName = "users")]
        public IList<User> Users { get; set; }

        /// <summary>
        /// Gets or sets customers
        /// </summary>
        /// <remarks>
        /// All customers assigned to the team
        /// </remarks>
        [JsonProperty(PropertyName = "customers")]
        public IList<Customer> Customers { get; set; }

        /// <summary>
        /// Gets or sets projects
        /// </summary>
        /// <remarks>
        /// All projects assigned to the team
        /// </remarks>
        [JsonProperty(PropertyName = "projects")]
        public IList<Project> Projects { get; set; }

        /// <summary>
        /// Gets or sets activities
        /// </summary>
        /// <remarks>
        /// All activities assigned to the team
        /// </remarks>
        [JsonProperty(PropertyName = "activities")]
        public IList<Activity> Activities { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Teamlead == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Teamlead");
            }
            if (Name != null)
            {
                if (Name.Length > 100)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 100);
                }
                if (Name.Length < 2)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 2);
                }
            }
            if (Teamlead != null)
            {
                Teamlead.Validate();
            }
            if (Users != null)
            {
                foreach (var element in Users)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Customers != null)
            {
                foreach (var element1 in Customers)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (Projects != null)
            {
                foreach (var element2 in Projects)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (Activities != null)
            {
                foreach (var element3 in Activities)
                {
                    if (element3 != null)
                    {
                        element3.Validate();
                    }
                }
            }
        }
    }
}
