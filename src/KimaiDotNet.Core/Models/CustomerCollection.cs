// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace MarkZither.KimaiDotNet.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class CustomerCollection
    {
        /// <summary>
        /// Initializes a new instance of the CustomerCollection class.
        /// </summary>
        public CustomerCollection()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CustomerCollection class.
        /// </summary>
        /// <param name="metaFields">Meta fields</param>
        /// <param name="teams">Teams</param>
        /// <param name="color">The assigned color in HTML hex format, eg.
        /// #dd1d00</param>
        public CustomerCollection(string name, bool visible, string currency, int? id = default(int?), IList<CustomerMeta> metaFields = default(IList<CustomerMeta>), IList<Team> teams = default(IList<Team>), string color = default(string))
        {
            Id = id;
            Name = name;
            Visible = visible;
            Currency = currency;
            MetaFields = metaFields;
            Teams = teams;
            Color = color;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "visible")]
        public bool Visible { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or sets meta fields
        /// </summary>
        /// <remarks>
        /// All visible meta (custom) fields registered with this customer
        /// </remarks>
        [JsonProperty(PropertyName = "metaFields")]
        public IList<CustomerMeta> MetaFields { get; set; }

        /// <summary>
        /// Gets or sets teams
        /// </summary>
        /// <remarks>
        /// If no team is assigned, everyone can access the customer
        /// </remarks>
        [JsonProperty(PropertyName = "teams")]
        public IList<Team> Teams { get; set; }

        /// <summary>
        /// Gets or sets the assigned color in HTML hex format, eg. #dd1d00
        /// </summary>
        [JsonProperty(PropertyName = "color")]
        public string Color { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Currency == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Currency");
            }
            if (Name != null)
            {
                if (Name.Length > 150)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 150);
                }
                if (Name.Length < 2)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 2);
                }
            }
            if (Currency != null)
            {
                if (Currency.Length > 3)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Currency", 3);
                }
            }
            if (MetaFields != null)
            {
                foreach (var element in MetaFields)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Teams != null)
            {
                foreach (var element1 in Teams)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
