// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace MarkZither.KimaiDotNet.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class UserCollection
    {
        /// <summary>
        /// Initializes a new instance of the UserCollection class.
        /// </summary>
        public UserCollection()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserCollection class.
        /// </summary>
        /// <param name="id">Internal ID</param>
        /// <param name="alias">The user alias will be displayed in the
        /// frontend instead of the username</param>
        public UserCollection(string username = default(string), bool? enabled = default(bool?), int? id = default(int?), string alias = default(string))
        {
            Username = username;
            Enabled = enabled;
            Id = id;
            Alias = alias;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "username")]
        public string Username { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "enabled")]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or sets internal ID
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or sets the user alias will be displayed in the frontend
        /// instead of the username
        /// </summary>
        [JsonProperty(PropertyName = "alias")]
        public string Alias { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Alias != null)
            {
                if (Alias.Length > 60)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Alias", 60);
                }
            }
        }
    }
}
