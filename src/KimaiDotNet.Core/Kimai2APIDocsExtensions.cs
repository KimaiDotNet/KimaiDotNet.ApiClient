// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace MarkZither.KimaiDotNet
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Kimai2APIDocs.
    /// </summary>
    public static partial class Kimai2APIDocsExtensions
    {
            /// <summary>
            /// Sets the value of a meta-field for an existing activity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Activity record ID to set the meta-field value for
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ActivityEntity UpdateActivityMetaUsingPatch(this IKimai2APIDocs operations, int id, Body body = default(Body))
            {
                return operations.UpdateActivityMetaUsingPatchAsync(id, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the value of a meta-field for an existing activity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Activity record ID to set the meta-field value for
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ActivityEntity> UpdateActivityMetaUsingPatchAsync(this IKimai2APIDocs operations, int id, Body body = default(Body), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateActivityMetaUsingPatchWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a collection of activities
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='project'>
            /// Project ID to filter activities
            /// </param>
            /// <param name='projects'>
            /// Comma separated list of project IDs to filter activities
            /// </param>
            /// <param name='visible'>
            /// Visibility status to filter activities. Allowed values: 1=visible,
            /// 2=hidden, 3=all (default: 1)
            /// </param>
            /// <param name='globals'>
            /// Use if you want to fetch only global activities. Allowed values: true
            /// (default: false)
            /// </param>
            /// <param name='globalsFirst'>
            /// Deprecated parameter, value is not used any more
            /// </param>
            /// <param name='orderBy'>
            /// The field by which results will be ordered. Allowed values: id, name,
            /// project (default: name)
            /// </param>
            /// <param name='order'>
            /// The result order. Allowed values: ASC, DESC (default: ASC)
            /// </param>
            /// <param name='term'>
            /// Free search term
            /// </param>
            public static IList<ActivityCollection> ListActivitiesUsingGet(this IKimai2APIDocs operations, string project = default(string), string projects = default(string), string visible = default(string), string globals = default(string), string globalsFirst = default(string), string orderBy = default(string), string order = default(string), string term = default(string))
            {
                return operations.ListActivitiesUsingGetAsync(project, projects, visible, globals, globalsFirst, orderBy, order, term).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a collection of activities
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='project'>
            /// Project ID to filter activities
            /// </param>
            /// <param name='projects'>
            /// Comma separated list of project IDs to filter activities
            /// </param>
            /// <param name='visible'>
            /// Visibility status to filter activities. Allowed values: 1=visible,
            /// 2=hidden, 3=all (default: 1)
            /// </param>
            /// <param name='globals'>
            /// Use if you want to fetch only global activities. Allowed values: true
            /// (default: false)
            /// </param>
            /// <param name='globalsFirst'>
            /// Deprecated parameter, value is not used any more
            /// </param>
            /// <param name='orderBy'>
            /// The field by which results will be ordered. Allowed values: id, name,
            /// project (default: name)
            /// </param>
            /// <param name='order'>
            /// The result order. Allowed values: ASC, DESC (default: ASC)
            /// </param>
            /// <param name='term'>
            /// Free search term
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ActivityCollection>> ListActivitiesUsingGetAsync(this IKimai2APIDocs operations, string project = default(string), string projects = default(string), string visible = default(string), string globals = default(string), string globalsFirst = default(string), string orderBy = default(string), string order = default(string), string term = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListActivitiesUsingGetWithHttpMessagesAsync(project, projects, visible, globals, globalsFirst, orderBy, order, term, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new activity
            /// </summary>
            /// <remarks>
            /// Creates a new activity and returns it afterwards
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ActivityEntity CreateActivityUsingPost(this IKimai2APIDocs operations, ActivityEditForm body)
            {
                return operations.CreateActivityUsingPostAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new activity
            /// </summary>
            /// <remarks>
            /// Creates a new activity and returns it afterwards
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ActivityEntity> CreateActivityUsingPostAsync(this IKimai2APIDocs operations, ActivityEditForm body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateActivityUsingPostWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns one activity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Activity ID to fetch
            /// </param>
            public static ActivityEntity GetActivityByIdUsingGet(this IKimai2APIDocs operations, int id)
            {
                return operations.GetActivityByIdUsingGetAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns one activity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Activity ID to fetch
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ActivityEntity> GetActivityByIdUsingGetAsync(this IKimai2APIDocs operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActivityByIdUsingGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an existing activity
            /// </summary>
            /// <remarks>
            /// Update an existing activity, you can pass all or just a subset of all
            /// attributes
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='id'>
            /// Activity ID to update
            /// </param>
            public static ActivityEntity UpdateActivityUsingPatch(this IKimai2APIDocs operations, ActivityEditForm body, int id)
            {
                return operations.UpdateActivityUsingPatchAsync(body, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an existing activity
            /// </summary>
            /// <remarks>
            /// Update an existing activity, you can pass all or just a subset of all
            /// attributes
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='id'>
            /// Activity ID to update
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ActivityEntity> UpdateActivityUsingPatchAsync(this IKimai2APIDocs operations, ActivityEditForm body, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateActivityUsingPatchWithHttpMessagesAsync(body, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a collection of all rates for one activity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The activity whose rates will be returned
            /// </param>
            public static IList<ActivityRate> ListActivityRatesUsingGet(this IKimai2APIDocs operations, int id)
            {
                return operations.ListActivityRatesUsingGetAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a collection of all rates for one activity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The activity whose rates will be returned
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ActivityRate>> ListActivityRatesUsingGetAsync(this IKimai2APIDocs operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListActivityRatesUsingGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new rate to an activity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The activity to add the rate for
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ActivityRate AddActivityRateUsingPost(this IKimai2APIDocs operations, int id, ActivityRateForm body)
            {
                return operations.AddActivityRateUsingPostAsync(id, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new rate to an activity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The activity to add the rate for
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ActivityRate> AddActivityRateUsingPostAsync(this IKimai2APIDocs operations, int id, ActivityRateForm body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddActivityRateUsingPostWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes one rate for an activity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The activity whose rate will be removed
            /// </param>
            /// <param name='rateId'>
            /// The rate to remove
            /// </param>
            public static void DeleteActivityRateUsingDelete(this IKimai2APIDocs operations, int id, int rateId)
            {
                operations.DeleteActivityRateUsingDeleteAsync(id, rateId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes one rate for an activity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The activity whose rate will be removed
            /// </param>
            /// <param name='rateId'>
            /// The rate to remove
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteActivityRateUsingDeleteAsync(this IKimai2APIDocs operations, int id, int rateId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteActivityRateUsingDeleteWithHttpMessagesAsync(id, rateId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns the user specific locale configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static I18nConfig GetCurrentUserLocaleUsingGet(this IKimai2APIDocs operations)
            {
                return operations.GetCurrentUserLocaleUsingGetAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the user specific locale configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<I18nConfig> GetCurrentUserLocaleUsingGetAsync(this IKimai2APIDocs operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCurrentUserLocaleUsingGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the timesheet configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static TimesheetConfig GetTimesheetConfigUsingGet(this IKimai2APIDocs operations)
            {
                return operations.GetTimesheetConfigUsingGetAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the timesheet configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TimesheetConfig> GetTimesheetConfigUsingGetAsync(this IKimai2APIDocs operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTimesheetConfigUsingGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets the value of a meta-field for an existing customer
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Customer record ID to set the meta-field value for
            /// </param>
            /// <param name='body'>
            /// </param>
            public static CustomerEntity UpdateCustomerMetaUsingPatch(this IKimai2APIDocs operations, int id, Body body = default(Body))
            {
                return operations.UpdateCustomerMetaUsingPatchAsync(id, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the value of a meta-field for an existing customer
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Customer record ID to set the meta-field value for
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomerEntity> UpdateCustomerMetaUsingPatchAsync(this IKimai2APIDocs operations, int id, Body body = default(Body), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCustomerMetaUsingPatchWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a collection of customers
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='visible'>
            /// Visibility status to filter activities (1=visible, 2=hidden, 3=both)
            /// </param>
            /// <param name='order'>
            /// The result order. Allowed values: ASC, DESC (default: ASC)
            /// </param>
            /// <param name='orderBy'>
            /// The field by which results will be ordered. Allowed values: id, name
            /// (default: name)
            /// </param>
            /// <param name='term'>
            /// Free search term
            /// </param>
            public static IList<CustomerCollection> ListCustomersUsingGet(this IKimai2APIDocs operations, string visible = default(string), string order = default(string), string orderBy = default(string), string term = default(string))
            {
                return operations.ListCustomersUsingGetAsync(visible, order, orderBy, term).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a collection of customers
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='visible'>
            /// Visibility status to filter activities (1=visible, 2=hidden, 3=both)
            /// </param>
            /// <param name='order'>
            /// The result order. Allowed values: ASC, DESC (default: ASC)
            /// </param>
            /// <param name='orderBy'>
            /// The field by which results will be ordered. Allowed values: id, name
            /// (default: name)
            /// </param>
            /// <param name='term'>
            /// Free search term
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CustomerCollection>> ListCustomersUsingGetAsync(this IKimai2APIDocs operations, string visible = default(string), string order = default(string), string orderBy = default(string), string term = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCustomersUsingGetWithHttpMessagesAsync(visible, order, orderBy, term, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new customer
            /// </summary>
            /// <remarks>
            /// Creates a new customer and returns it afterwards
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static CustomerEntity CreateCustomerUsingPost(this IKimai2APIDocs operations, CustomerEditForm body)
            {
                return operations.CreateCustomerUsingPostAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new customer
            /// </summary>
            /// <remarks>
            /// Creates a new customer and returns it afterwards
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomerEntity> CreateCustomerUsingPostAsync(this IKimai2APIDocs operations, CustomerEditForm body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCustomerUsingPostWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns one customer
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static CustomerEntity GetCustomerByIdUsingGet(this IKimai2APIDocs operations, string id)
            {
                return operations.GetCustomerByIdUsingGetAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns one customer
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomerEntity> GetCustomerByIdUsingGetAsync(this IKimai2APIDocs operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCustomerByIdUsingGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an existing customer
            /// </summary>
            /// <remarks>
            /// Update an existing customer, you can pass all or just a subset of all
            /// attributes
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='id'>
            /// Customer ID to update
            /// </param>
            public static CustomerEntity UpdateCustomerUsingPatch(this IKimai2APIDocs operations, CustomerEditForm body, int id)
            {
                return operations.UpdateCustomerUsingPatchAsync(body, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an existing customer
            /// </summary>
            /// <remarks>
            /// Update an existing customer, you can pass all or just a subset of all
            /// attributes
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='id'>
            /// Customer ID to update
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomerEntity> UpdateCustomerUsingPatchAsync(this IKimai2APIDocs operations, CustomerEditForm body, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCustomerUsingPatchWithHttpMessagesAsync(body, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a collection of all rates for one customer
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The customer whose rates will be returned
            /// </param>
            public static IList<CustomerRate> ListCustomerRatesUsingGet(this IKimai2APIDocs operations, int id)
            {
                return operations.ListCustomerRatesUsingGetAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a collection of all rates for one customer
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The customer whose rates will be returned
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CustomerRate>> ListCustomerRatesUsingGetAsync(this IKimai2APIDocs operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCustomerRatesUsingGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new rate to a customer
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The customer to add the rate for
            /// </param>
            /// <param name='body'>
            /// </param>
            public static CustomerRate CreateCustomerRateUsingPost(this IKimai2APIDocs operations, int id, CustomerRateForm body)
            {
                return operations.CreateCustomerRateUsingPostAsync(id, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new rate to a customer
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The customer to add the rate for
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomerRate> CreateCustomerRateUsingPostAsync(this IKimai2APIDocs operations, int id, CustomerRateForm body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCustomerRateUsingPostWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes one rate for an customer
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The customer whose rate will be removed
            /// </param>
            /// <param name='rateId'>
            /// The rate to remove
            /// </param>
            public static void DeleteCustomerRateUsingDelete(this IKimai2APIDocs operations, int id, int rateId)
            {
                operations.DeleteCustomerRateUsingDeleteAsync(id, rateId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes one rate for an customer
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The customer whose rate will be removed
            /// </param>
            /// <param name='rateId'>
            /// The rate to remove
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteCustomerRateUsingDeleteAsync(this IKimai2APIDocs operations, int id, int rateId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteCustomerRateUsingDeleteWithHttpMessagesAsync(id, rateId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Sets the value of a meta-field for an existing project
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Project record ID to set the meta-field value for
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ProjectEntity UpdateProjectMetaUsingPatch(this IKimai2APIDocs operations, int id, Body body = default(Body))
            {
                return operations.UpdateProjectMetaUsingPatchAsync(id, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the value of a meta-field for an existing project
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Project record ID to set the meta-field value for
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProjectEntity> UpdateProjectMetaUsingPatchAsync(this IKimai2APIDocs operations, int id, Body body = default(Body), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateProjectMetaUsingPatchWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a collection of projects.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customer'>
            /// Customer ID to filter projects
            /// </param>
            /// <param name='customers'>
            /// Comma separated list of customer IDs to filter projects
            /// </param>
            /// <param name='visible'>
            /// Visibility status to filter projects. Allowed values: 1=visible, 2=hidden,
            /// 3=both (default: 1)
            /// </param>
            /// <param name='start'>
            /// Only projects that started before this date will be included. Allowed
            /// format: HTML5 (default: now, if end is also empty)
            /// </param>
            /// <param name='end'>
            /// Only projects that ended after this date will be included. Allowed format:
            /// HTML5 (default: now, if start is also empty)
            /// </param>
            /// <param name='ignoreDates'>
            /// If set, start and end are completely ignored. Allowed values: 1 (default:
            /// off)
            /// </param>
            /// <param name='order'>
            /// The result order. Allowed values: ASC, DESC (default: ASC)
            /// </param>
            /// <param name='orderBy'>
            /// The field by which results will be ordered. Allowed values: id, name,
            /// customer (default: name)
            /// </param>
            /// <param name='term'>
            /// Free search term
            /// </param>
            public static IList<ProjectCollection> ListProjectUsingGet(this IKimai2APIDocs operations, string customer = default(string), string customers = default(string), string visible = default(string), string start = default(string), string end = default(string), string ignoreDates = default(string), string order = default(string), string orderBy = default(string), string term = default(string))
            {
                return operations.ListProjectUsingGetAsync(customer, customers, visible, start, end, ignoreDates, order, orderBy, term).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a collection of projects.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customer'>
            /// Customer ID to filter projects
            /// </param>
            /// <param name='customers'>
            /// Comma separated list of customer IDs to filter projects
            /// </param>
            /// <param name='visible'>
            /// Visibility status to filter projects. Allowed values: 1=visible, 2=hidden,
            /// 3=both (default: 1)
            /// </param>
            /// <param name='start'>
            /// Only projects that started before this date will be included. Allowed
            /// format: HTML5 (default: now, if end is also empty)
            /// </param>
            /// <param name='end'>
            /// Only projects that ended after this date will be included. Allowed format:
            /// HTML5 (default: now, if start is also empty)
            /// </param>
            /// <param name='ignoreDates'>
            /// If set, start and end are completely ignored. Allowed values: 1 (default:
            /// off)
            /// </param>
            /// <param name='order'>
            /// The result order. Allowed values: ASC, DESC (default: ASC)
            /// </param>
            /// <param name='orderBy'>
            /// The field by which results will be ordered. Allowed values: id, name,
            /// customer (default: name)
            /// </param>
            /// <param name='term'>
            /// Free search term
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ProjectCollection>> ListProjectUsingGetAsync(this IKimai2APIDocs operations, string customer = default(string), string customers = default(string), string visible = default(string), string start = default(string), string end = default(string), string ignoreDates = default(string), string order = default(string), string orderBy = default(string), string term = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProjectUsingGetWithHttpMessagesAsync(customer, customers, visible, start, end, ignoreDates, order, orderBy, term, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new project
            /// </summary>
            /// <remarks>
            /// Creates a new project and returns it afterwards
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ProjectEntity CreateProjectUsingPost(this IKimai2APIDocs operations, ProjectEditForm body)
            {
                return operations.CreateProjectUsingPostAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new project
            /// </summary>
            /// <remarks>
            /// Creates a new project and returns it afterwards
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProjectEntity> CreateProjectUsingPostAsync(this IKimai2APIDocs operations, ProjectEditForm body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateProjectUsingPostWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns one project
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static ProjectEntity GetProjectByIdUsingGet(this IKimai2APIDocs operations, string id)
            {
                return operations.GetProjectByIdUsingGetAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns one project
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProjectEntity> GetProjectByIdUsingGetAsync(this IKimai2APIDocs operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProjectByIdUsingGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an existing project
            /// </summary>
            /// <remarks>
            /// Update an existing project, you can pass all or just a subset of all
            /// attributes
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='id'>
            /// Project ID to update
            /// </param>
            public static ProjectEntity UpdateProjectUsingPatch(this IKimai2APIDocs operations, ProjectEditForm body, int id)
            {
                return operations.UpdateProjectUsingPatchAsync(body, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an existing project
            /// </summary>
            /// <remarks>
            /// Update an existing project, you can pass all or just a subset of all
            /// attributes
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='id'>
            /// Project ID to update
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProjectEntity> UpdateProjectUsingPatchAsync(this IKimai2APIDocs operations, ProjectEditForm body, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateProjectUsingPatchWithHttpMessagesAsync(body, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a collection of all rates for one project
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The project whose rates will be returned
            /// </param>
            public static IList<ProjectRate> GetProjectRateUsingGet(this IKimai2APIDocs operations, int id)
            {
                return operations.GetProjectRateUsingGetAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a collection of all rates for one project
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The project whose rates will be returned
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ProjectRate>> GetProjectRateUsingGetAsync(this IKimai2APIDocs operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProjectRateUsingGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new rate to an project
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The project to add the rate for
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ProjectRate CreateProjectRateUsingPost(this IKimai2APIDocs operations, int id, ProjectRateForm body)
            {
                return operations.CreateProjectRateUsingPostAsync(id, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new rate to an project
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The project to add the rate for
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProjectRate> CreateProjectRateUsingPostAsync(this IKimai2APIDocs operations, int id, ProjectRateForm body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateProjectRateUsingPostWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes one rate for an project
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The project whose rate will be removed
            /// </param>
            /// <param name='rateId'>
            /// The rate to remove
            /// </param>
            public static void DeleteProjectRateUsingDelete(this IKimai2APIDocs operations, int id, int rateId)
            {
                operations.DeleteProjectRateUsingDeleteAsync(id, rateId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes one rate for an project
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The project whose rate will be removed
            /// </param>
            /// <param name='rateId'>
            /// The rate to remove
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteProjectRateUsingDeleteAsync(this IKimai2APIDocs operations, int id, int rateId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteProjectRateUsingDeleteWithHttpMessagesAsync(id, rateId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// A testing route for the API
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void Ping(this IKimai2APIDocs operations)
            {
                operations.PingAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// A testing route for the API
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PingAsync(this IKimai2APIDocs operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PingWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns information about the Kimai release
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Version VersionMethod(this IKimai2APIDocs operations)
            {
                return operations.VersionMethodAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns information about the Kimai release
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Version> VersionMethodAsync(this IKimai2APIDocs operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.VersionMethodWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Fetch all existing tags
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Search term to filter tag list
            /// </param>
            public static IList<string> ListTagsUsingGet(this IKimai2APIDocs operations, string name = default(string))
            {
                return operations.ListTagsUsingGetAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Fetch all existing tags
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Search term to filter tag list
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> ListTagsUsingGetAsync(this IKimai2APIDocs operations, string name = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTagsUsingGetWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new tag
            /// </summary>
            /// <remarks>
            /// Creates a new tag and returns it afterwards
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static TagEntity CreateTagUsingPost(this IKimai2APIDocs operations, TagEditForm body)
            {
                return operations.CreateTagUsingPostAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new tag
            /// </summary>
            /// <remarks>
            /// Creates a new tag and returns it afterwards
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TagEntity> CreateTagUsingPostAsync(this IKimai2APIDocs operations, TagEditForm body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTagUsingPostWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Tag ID to delete
            /// </param>
            public static void DeleteTagUsingDelete(this IKimai2APIDocs operations, int id)
            {
                operations.DeleteTagUsingDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Tag ID to delete
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTagUsingDeleteAsync(this IKimai2APIDocs operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteTagUsingDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Fetch all existing teams
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<TeamCollection> ListTeamUsingGet(this IKimai2APIDocs operations)
            {
                return operations.ListTeamUsingGetAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Fetch all existing teams
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TeamCollection>> ListTeamUsingGetAsync(this IKimai2APIDocs operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTeamUsingGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new team
            /// </summary>
            /// <remarks>
            /// Creates a new team and returns it afterwards
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static TeamEntity CreateTeamUsingPost(this IKimai2APIDocs operations, TeamEditForm body)
            {
                return operations.CreateTeamUsingPostAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new team
            /// </summary>
            /// <remarks>
            /// Creates a new team and returns it afterwards
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TeamEntity> CreateTeamUsingPostAsync(this IKimai2APIDocs operations, TeamEditForm body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTeamUsingPostWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns one team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static TeamEntity GetTeamByIdUsingGet(this IKimai2APIDocs operations, string id)
            {
                return operations.GetTeamByIdUsingGetAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns one team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TeamEntity> GetTeamByIdUsingGetAsync(this IKimai2APIDocs operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTeamByIdUsingGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an existing team
            /// </summary>
            /// <remarks>
            /// Update an existing team, you can pass all or just a subset of all
            /// attributes (passing users will replace all existing ones)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='id'>
            /// Team ID to update
            /// </param>
            public static TeamEntity UpdateTeamUsingPatch(this IKimai2APIDocs operations, TeamEditForm body, int id)
            {
                return operations.UpdateTeamUsingPatchAsync(body, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an existing team
            /// </summary>
            /// <remarks>
            /// Update an existing team, you can pass all or just a subset of all
            /// attributes (passing users will replace all existing ones)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='id'>
            /// Team ID to update
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TeamEntity> UpdateTeamUsingPatchAsync(this IKimai2APIDocs operations, TeamEditForm body, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTeamUsingPatchWithHttpMessagesAsync(body, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Team ID to delete
            /// </param>
            public static void DeleteTeamUsingDelete(this IKimai2APIDocs operations, int id)
            {
                operations.DeleteTeamUsingDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Team ID to delete
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTeamUsingDeleteAsync(this IKimai2APIDocs operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteTeamUsingDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Add a new member to a team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The team which will receive the new member
            /// </param>
            /// <param name='userId'>
            /// The team member to add (User ID)
            /// </param>
            public static TeamEntity AddTeamMemberUsingPost(this IKimai2APIDocs operations, int id, int userId)
            {
                return operations.AddTeamMemberUsingPostAsync(id, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a new member to a team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The team which will receive the new member
            /// </param>
            /// <param name='userId'>
            /// The team member to add (User ID)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TeamEntity> AddTeamMemberUsingPostAsync(this IKimai2APIDocs operations, int id, int userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddTeamMemberUsingPostWithHttpMessagesAsync(id, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes a member from the team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The team from which the member will be removed
            /// </param>
            /// <param name='userId'>
            /// The team member to remove (User ID)
            /// </param>
            public static TeamEntity DeleteTeamMemberUsingDelete(this IKimai2APIDocs operations, int id, int userId)
            {
                return operations.DeleteTeamMemberUsingDeleteAsync(id, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes a member from the team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The team from which the member will be removed
            /// </param>
            /// <param name='userId'>
            /// The team member to remove (User ID)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TeamEntity> DeleteTeamMemberUsingDeleteAsync(this IKimai2APIDocs operations, int id, int userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteTeamMemberUsingDeleteWithHttpMessagesAsync(id, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Grant the team access to a customer
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The team that is granted access
            /// </param>
            /// <param name='customerId'>
            /// The customer to grant acecess to (Customer ID)
            /// </param>
            public static TeamEntity GrantTeamCustomerAccessUsingPost(this IKimai2APIDocs operations, int id, int customerId)
            {
                return operations.GrantTeamCustomerAccessUsingPostAsync(id, customerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Grant the team access to a customer
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The team that is granted access
            /// </param>
            /// <param name='customerId'>
            /// The customer to grant acecess to (Customer ID)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TeamEntity> GrantTeamCustomerAccessUsingPostAsync(this IKimai2APIDocs operations, int id, int customerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GrantTeamCustomerAccessUsingPostWithHttpMessagesAsync(id, customerId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Revokes access for a customer from a team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The team whose permission will be revoked
            /// </param>
            /// <param name='customerId'>
            /// The customer to remove (Customer ID)
            /// </param>
            public static TeamEntity RevokeTeamCustomerAccessUsingDelete(this IKimai2APIDocs operations, int id, int customerId)
            {
                return operations.RevokeTeamCustomerAccessUsingDeleteAsync(id, customerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Revokes access for a customer from a team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The team whose permission will be revoked
            /// </param>
            /// <param name='customerId'>
            /// The customer to remove (Customer ID)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TeamEntity> RevokeTeamCustomerAccessUsingDeleteAsync(this IKimai2APIDocs operations, int id, int customerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RevokeTeamCustomerAccessUsingDeleteWithHttpMessagesAsync(id, customerId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Grant the team access to a project
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The team that is granted access
            /// </param>
            /// <param name='projectId'>
            /// The project to grant acecess to (Project ID)
            /// </param>
            public static TeamEntity GrantTeamProjectAccessUsingPost(this IKimai2APIDocs operations, int id, int projectId)
            {
                return operations.GrantTeamProjectAccessUsingPostAsync(id, projectId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Grant the team access to a project
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The team that is granted access
            /// </param>
            /// <param name='projectId'>
            /// The project to grant acecess to (Project ID)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TeamEntity> GrantTeamProjectAccessUsingPostAsync(this IKimai2APIDocs operations, int id, int projectId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GrantTeamProjectAccessUsingPostWithHttpMessagesAsync(id, projectId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Revokes access for a project from a team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The team whose permission will be revoked
            /// </param>
            /// <param name='projectId'>
            /// The project to remove (Project ID)
            /// </param>
            public static TeamEntity RevokeTeamProjectAccessUsingDelete(this IKimai2APIDocs operations, int id, int projectId)
            {
                return operations.RevokeTeamProjectAccessUsingDeleteAsync(id, projectId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Revokes access for a project from a team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The team whose permission will be revoked
            /// </param>
            /// <param name='projectId'>
            /// The project to remove (Project ID)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TeamEntity> RevokeTeamProjectAccessUsingDeleteAsync(this IKimai2APIDocs operations, int id, int projectId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RevokeTeamProjectAccessUsingDeleteWithHttpMessagesAsync(id, projectId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Grant the team access to an activity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The team that is granted access
            /// </param>
            /// <param name='activityId'>
            /// The activity to grant acecess to (Activity ID)
            /// </param>
            public static TeamEntity GrantTeamActivityAccessUsingPost(this IKimai2APIDocs operations, int id, int activityId)
            {
                return operations.GrantTeamActivityAccessUsingPostAsync(id, activityId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Grant the team access to an activity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The team that is granted access
            /// </param>
            /// <param name='activityId'>
            /// The activity to grant acecess to (Activity ID)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TeamEntity> GrantTeamActivityAccessUsingPostAsync(this IKimai2APIDocs operations, int id, int activityId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GrantTeamActivityAccessUsingPostWithHttpMessagesAsync(id, activityId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Revokes access for an activity from a team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The team whose permission will be revoked
            /// </param>
            /// <param name='activityId'>
            /// The activity to remove (Activity ID)
            /// </param>
            public static TeamEntity RevokeTeamActivityAccessUsingDelete(this IKimai2APIDocs operations, int id, int activityId)
            {
                return operations.RevokeTeamActivityAccessUsingDeleteAsync(id, activityId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Revokes access for an activity from a team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The team whose permission will be revoked
            /// </param>
            /// <param name='activityId'>
            /// The activity to remove (Activity ID)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TeamEntity> RevokeTeamActivityAccessUsingDeleteAsync(this IKimai2APIDocs operations, int id, int activityId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RevokeTeamActivityAccessUsingDeleteWithHttpMessagesAsync(id, activityId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the collection of recent user activities
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// User ID to filter timesheets. Needs permission 'view_other_timesheet', pass
            /// 'all' to fetch data for all user (default: current user)
            /// </param>
            /// <param name='begin'>
            /// Only records after this date will be included. Default: today - 1 year
            /// (format: HTML5)
            /// </param>
            /// <param name='size'>
            /// The amount of entries (default: 10)
            /// </param>
            public static IList<TimesheetCollectionExpanded> ListUserTimesheetsUsingGet(this IKimai2APIDocs operations, string user = default(string), string begin = default(string), string size = default(string))
            {
                return operations.ListUserTimesheetsUsingGetAsync(user, begin, size).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the collection of recent user activities
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// User ID to filter timesheets. Needs permission 'view_other_timesheet', pass
            /// 'all' to fetch data for all user (default: current user)
            /// </param>
            /// <param name='begin'>
            /// Only records after this date will be included. Default: today - 1 year
            /// (format: HTML5)
            /// </param>
            /// <param name='size'>
            /// The amount of entries (default: 10)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TimesheetCollectionExpanded>> ListUserTimesheetsUsingGetAsync(this IKimai2APIDocs operations, string user = default(string), string begin = default(string), string size = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListUserTimesheetsUsingGetWithHttpMessagesAsync(user, begin, size, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the collection of active timesheet records
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<TimesheetCollectionExpanded> ListUsersActiveTimesheetsUsingGet(this IKimai2APIDocs operations)
            {
                return operations.ListUsersActiveTimesheetsUsingGetAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the collection of active timesheet records
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TimesheetCollectionExpanded>> ListUsersActiveTimesheetsUsingGetAsync(this IKimai2APIDocs operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListUsersActiveTimesheetsUsingGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stops an active timesheet record
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Timesheet record ID to stop
            /// </param>
            public static TimesheetEntity StopActiveTimesheetRecordUsingPatch(this IKimai2APIDocs operations, int id)
            {
                return operations.StopActiveTimesheetRecordUsingPatchAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops an active timesheet record
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Timesheet record ID to stop
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TimesheetEntity> StopActiveTimesheetRecordUsingPatchAsync(this IKimai2APIDocs operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StopActiveTimesheetRecordUsingPatchWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restarts a previously stopped timesheet record for the current user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Timesheet record ID to restart
            /// </param>
            /// <param name='body'>
            /// </param>
            public static TimesheetEntity RestartTimesheetUsingPatch(this IKimai2APIDocs operations, int id, BodyModel body = default(BodyModel))
            {
                return operations.RestartTimesheetUsingPatchAsync(id, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restarts a previously stopped timesheet record for the current user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Timesheet record ID to restart
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TimesheetEntity> RestartTimesheetUsingPatchAsync(this IKimai2APIDocs operations, int id, BodyModel body = default(BodyModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RestartTimesheetUsingPatchWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Duplicates an existing timesheet record
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Timesheet record ID to duplicate
            /// </param>
            public static TimesheetEntity DuplicateTimesheetUsingPatch(this IKimai2APIDocs operations, int id)
            {
                return operations.DuplicateTimesheetUsingPatchAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Duplicates an existing timesheet record
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Timesheet record ID to duplicate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TimesheetEntity> DuplicateTimesheetUsingPatchAsync(this IKimai2APIDocs operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DuplicateTimesheetUsingPatchWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Switch the export state of a timesheet record to (un-)lock it
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Timesheet record ID to switch export state
            /// </param>
            public static TimesheetEntity SwitchTimesheetLockUsingPatch(this IKimai2APIDocs operations, int id)
            {
                return operations.SwitchTimesheetLockUsingPatchAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Switch the export state of a timesheet record to (un-)lock it
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Timesheet record ID to switch export state
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TimesheetEntity> SwitchTimesheetLockUsingPatchAsync(this IKimai2APIDocs operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SwitchTimesheetLockUsingPatchWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets the value of a meta-field for an existing timesheet.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Timesheet record ID to set the meta-field value for
            /// </param>
            /// <param name='body'>
            /// </param>
            public static TimesheetEntity UpdateTimesheetMetaUsingPatch(this IKimai2APIDocs operations, int id, Body body = default(Body))
            {
                return operations.UpdateTimesheetMetaUsingPatchAsync(id, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the value of a meta-field for an existing timesheet.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Timesheet record ID to set the meta-field value for
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TimesheetEntity> UpdateTimesheetMetaUsingPatchAsync(this IKimai2APIDocs operations, int id, Body body = default(Body), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTimesheetMetaUsingPatchWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a collection of timesheet records
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// User ID to filter timesheets. Needs permission 'view_other_timesheet', pass
            /// 'all' to fetch data for all user (default: current user)
            /// </param>
            /// <param name='customer'>
            /// DEPRECATED: Customer ID to filter timesheets (will be removed with 2.0)
            /// </param>
            /// <param name='customers'>
            /// Comma separated list of customer IDs to filter timesheets
            /// </param>
            /// <param name='project'>
            /// DEPRECATED: Project ID to filter timesheets (will be removed with 2.0)
            /// </param>
            /// <param name='projects'>
            /// Comma separated list of project IDs to filter timesheets
            /// </param>
            /// <param name='activity'>
            /// DEPRECATED: Activity ID to filter timesheets (will be removed with 2.0)
            /// </param>
            /// <param name='activities'>
            /// Comma separated list of activity IDs to filter timesheets
            /// </param>
            /// <param name='page'>
            /// The page to display, renders a 404 if not found (default: 1)
            /// </param>
            /// <param name='size'>
            /// The amount of entries for each page (default: 50)
            /// </param>
            /// <param name='tags'>
            /// The name of tags which are in the datasets
            /// </param>
            /// <param name='orderBy'>
            /// The field by which results will be ordered. Allowed values: id, begin, end,
            /// rate (default: begin)
            /// </param>
            /// <param name='order'>
            /// The result order. Allowed values: ASC, DESC (default: DESC)
            /// </param>
            /// <param name='begin'>
            /// Only records after this date will be included (format: HTML5)
            /// </param>
            /// <param name='end'>
            /// Only records before this date will be included (format: HTML5)
            /// </param>
            /// <param name='exported'>
            /// Use this flag if you want to filter for export state. Allowed values: 0=not
            /// exported, 1=exported (default: all)
            /// </param>
            /// <param name='active'>
            /// Filter for running/active records. Allowed values: 0=stopped, 1=active
            /// (default: all)
            /// </param>
            /// <param name='full'>
            /// Allows to fetch fully serialized objects including subresources. Allowed
            /// values: true (default: false)
            /// </param>
            /// <param name='term'>
            /// Free search term
            /// </param>
            /// <param name='modifiedAfter'>
            /// Only records changed after this date will be included (format: HTML5).
            /// Available since Kimai 1.10 and works only for records that were
            /// created/updated since then.
            /// </param>
            public static IList<TimesheetCollection> ListTimesheetsRecordsUsingGet(this IKimai2APIDocs operations, string user = default(string), string customer = default(string), string customers = default(string), string project = default(string), string projects = default(string), string activity = default(string), string activities = default(string), string page = default(string), string size = default(string), string tags = default(string), string orderBy = default(string), string order = default(string), string begin = default(string), string end = default(string), string exported = default(string), string active = default(string), string full = default(string), string term = default(string), string modifiedAfter = default(string))
            {
                return operations.ListTimesheetsRecordsUsingGetAsync(user, customer, customers, project, projects, activity, activities, page, size, tags, orderBy, order, begin, end, exported, active, full, term, modifiedAfter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a collection of timesheet records
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// User ID to filter timesheets. Needs permission 'view_other_timesheet', pass
            /// 'all' to fetch data for all user (default: current user)
            /// </param>
            /// <param name='customer'>
            /// DEPRECATED: Customer ID to filter timesheets (will be removed with 2.0)
            /// </param>
            /// <param name='customers'>
            /// Comma separated list of customer IDs to filter timesheets
            /// </param>
            /// <param name='project'>
            /// DEPRECATED: Project ID to filter timesheets (will be removed with 2.0)
            /// </param>
            /// <param name='projects'>
            /// Comma separated list of project IDs to filter timesheets
            /// </param>
            /// <param name='activity'>
            /// DEPRECATED: Activity ID to filter timesheets (will be removed with 2.0)
            /// </param>
            /// <param name='activities'>
            /// Comma separated list of activity IDs to filter timesheets
            /// </param>
            /// <param name='page'>
            /// The page to display, renders a 404 if not found (default: 1)
            /// </param>
            /// <param name='size'>
            /// The amount of entries for each page (default: 50)
            /// </param>
            /// <param name='tags'>
            /// The name of tags which are in the datasets
            /// </param>
            /// <param name='orderBy'>
            /// The field by which results will be ordered. Allowed values: id, begin, end,
            /// rate (default: begin)
            /// </param>
            /// <param name='order'>
            /// The result order. Allowed values: ASC, DESC (default: DESC)
            /// </param>
            /// <param name='begin'>
            /// Only records after this date will be included (format: HTML5)
            /// </param>
            /// <param name='end'>
            /// Only records before this date will be included (format: HTML5)
            /// </param>
            /// <param name='exported'>
            /// Use this flag if you want to filter for export state. Allowed values: 0=not
            /// exported, 1=exported (default: all)
            /// </param>
            /// <param name='active'>
            /// Filter for running/active records. Allowed values: 0=stopped, 1=active
            /// (default: all)
            /// </param>
            /// <param name='full'>
            /// Allows to fetch fully serialized objects including subresources. Allowed
            /// values: true (default: false)
            /// </param>
            /// <param name='term'>
            /// Free search term
            /// </param>
            /// <param name='modifiedAfter'>
            /// Only records changed after this date will be included (format: HTML5).
            /// Available since Kimai 1.10 and works only for records that were
            /// created/updated since then.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TimesheetCollection>> ListTimesheetsRecordsUsingGetAsync(this IKimai2APIDocs operations, string user = default(string), string customer = default(string), string customers = default(string), string project = default(string), string projects = default(string), string activity = default(string), string activities = default(string), string page = default(string), string size = default(string), string tags = default(string), string orderBy = default(string), string order = default(string), string begin = default(string), string end = default(string), string exported = default(string), string active = default(string), string full = default(string), string term = default(string), string modifiedAfter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTimesheetsRecordsUsingGetWithHttpMessagesAsync(user, customer, customers, project, projects, activity, activities, page, size, tags, orderBy, order, begin, end, exported, active, full, term, modifiedAfter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new timesheet record
            /// </summary>
            /// <remarks>
            /// Creates a new timesheet record for the current user and returns it
            /// afterwards.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='full'>
            /// Allows to fetch fully serialized objects including subresources
            /// (TimesheetEntityExpanded). Allowed values: true (default: false)
            /// </param>
            public static TimesheetEntity CreateTimesheetRecordUsingPost(this IKimai2APIDocs operations, TimesheetEditForm body, string full = default(string))
            {
                return operations.CreateTimesheetRecordUsingPostAsync(body, full).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new timesheet record
            /// </summary>
            /// <remarks>
            /// Creates a new timesheet record for the current user and returns it
            /// afterwards.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='full'>
            /// Allows to fetch fully serialized objects including subresources
            /// (TimesheetEntityExpanded). Allowed values: true (default: false)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TimesheetEntity> CreateTimesheetRecordUsingPostAsync(this IKimai2APIDocs operations, TimesheetEditForm body, string full = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTimesheetRecordUsingPostWithHttpMessagesAsync(body, full, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns one timesheet record
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Timesheet record ID to fetch
            /// </param>
            public static TimesheetEntity GetTimesheetRecordByIdUsingGet(this IKimai2APIDocs operations, int id)
            {
                return operations.GetTimesheetRecordByIdUsingGetAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns one timesheet record
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Timesheet record ID to fetch
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TimesheetEntity> GetTimesheetRecordByIdUsingGetAsync(this IKimai2APIDocs operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTimesheetRecordByIdUsingGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an existing timesheet record
            /// </summary>
            /// <remarks>
            /// Update an existing timesheet record, you can pass all or just a subset of
            /// the attributes.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='id'>
            /// Timesheet record ID to update
            /// </param>
            public static TimesheetEntity UpdateTimesheetRecordUsingPatch(this IKimai2APIDocs operations, TimesheetEditForm body, int id)
            {
                return operations.UpdateTimesheetRecordUsingPatchAsync(body, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an existing timesheet record
            /// </summary>
            /// <remarks>
            /// Update an existing timesheet record, you can pass all or just a subset of
            /// the attributes.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='id'>
            /// Timesheet record ID to update
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TimesheetEntity> UpdateTimesheetRecordUsingPatchAsync(this IKimai2APIDocs operations, TimesheetEditForm body, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTimesheetRecordUsingPatchWithHttpMessagesAsync(body, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an existing timesheet record
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Timesheet record ID to delete
            /// </param>
            public static void DeleteTimesheetRecordUsingDelete(this IKimai2APIDocs operations, int id)
            {
                operations.DeleteTimesheetRecordUsingDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an existing timesheet record
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Timesheet record ID to delete
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTimesheetRecordUsingDeleteAsync(this IKimai2APIDocs operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteTimesheetRecordUsingDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Return the current user entity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static UserEntity GetCurrentUserUsingGet(this IKimai2APIDocs operations)
            {
                return operations.GetCurrentUserUsingGetAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return the current user entity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserEntity> GetCurrentUserUsingGetAsync(this IKimai2APIDocs operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCurrentUserUsingGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the collection of all registered users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='visible'>
            /// Visibility status to filter users. Allowed values: 1=visible, 2=hidden,
            /// 3=all (default: 1)
            /// </param>
            /// <param name='orderBy'>
            /// The field by which results will be ordered. Allowed values: id, username,
            /// alias, email (default: username)
            /// </param>
            /// <param name='order'>
            /// The result order. Allowed values: ASC, DESC (default: ASC)
            /// </param>
            /// <param name='term'>
            /// Free search term
            /// </param>
            public static IList<UserCollection> ListUsersUsingGet(this IKimai2APIDocs operations, string visible = default(string), string orderBy = default(string), string order = default(string), string term = default(string))
            {
                return operations.ListUsersUsingGetAsync(visible, orderBy, order, term).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the collection of all registered users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='visible'>
            /// Visibility status to filter users. Allowed values: 1=visible, 2=hidden,
            /// 3=all (default: 1)
            /// </param>
            /// <param name='orderBy'>
            /// The field by which results will be ordered. Allowed values: id, username,
            /// alias, email (default: username)
            /// </param>
            /// <param name='order'>
            /// The result order. Allowed values: ASC, DESC (default: ASC)
            /// </param>
            /// <param name='term'>
            /// Free search term
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UserCollection>> ListUsersUsingGetAsync(this IKimai2APIDocs operations, string visible = default(string), string orderBy = default(string), string order = default(string), string term = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListUsersUsingGetWithHttpMessagesAsync(visible, orderBy, order, term, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new user
            /// </summary>
            /// <remarks>
            /// Creates a new user and returns it afterwards
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static UserEntity CreateUserUsingPost(this IKimai2APIDocs operations, UserCreateForm body)
            {
                return operations.CreateUserUsingPostAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new user
            /// </summary>
            /// <remarks>
            /// Creates a new user and returns it afterwards
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserEntity> CreateUserUsingPostAsync(this IKimai2APIDocs operations, UserCreateForm body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateUserUsingPostWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return one user entity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User ID to fetch
            /// </param>
            public static UserEntity GetUserByIdUsingGet(this IKimai2APIDocs operations, int id)
            {
                return operations.GetUserByIdUsingGetAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return one user entity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User ID to fetch
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserEntity> GetUserByIdUsingGetAsync(this IKimai2APIDocs operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserByIdUsingGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an existing user
            /// </summary>
            /// <remarks>
            /// Update an existing user, you can pass all or just a subset of all
            /// attributes (passing roles will replace all existing ones)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='id'>
            /// User ID to update
            /// </param>
            public static UserEntity UpdateUserUsingPatch(this IKimai2APIDocs operations, UserEditForm body, int id)
            {
                return operations.UpdateUserUsingPatchAsync(body, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an existing user
            /// </summary>
            /// <remarks>
            /// Update an existing user, you can pass all or just a subset of all
            /// attributes (passing roles will replace all existing ones)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='id'>
            /// User ID to update
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserEntity> UpdateUserUsingPatchAsync(this IKimai2APIDocs operations, UserEditForm body, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateUserUsingPatchWithHttpMessagesAsync(body, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
